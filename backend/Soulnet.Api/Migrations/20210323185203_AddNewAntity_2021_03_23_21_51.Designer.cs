// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Soulnet.Data;

namespace Soulnet.Api.Migrations
{
    [DbContext(typeof(SoulnetContext))]
    [Migration("20210323185203_AddNewAntity_2021_03_23_21_51")]
    partial class AddNewAntity_2021_03_23_21_51
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("Soulnet.Model.Entity.Dataset", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<bool>("IsLoaded")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Dataset");
                });

            modelBuilder.Entity("Soulnet.Model.Entity.Learning", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("DatasetId")
                        .HasColumnType("integer");

                    b.Property<int>("DeepLayersCount")
                        .HasColumnType("integer");

                    b.Property<int>("InputNeuronsCount")
                        .HasColumnType("integer");

                    b.Property<bool>("IsArchive")
                        .HasColumnType("boolean");

                    b.Property<int>("IterationCount")
                        .HasColumnType("integer");

                    b.Property<int>("IterationCurrent")
                        .HasColumnType("integer");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Learning");
                });

            modelBuilder.Entity("Soulnet.Model.Entity.Testing", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("DatasetId")
                        .HasColumnType("text");

                    b.Property<float>("EndDeposit")
                        .HasColumnType("real");

                    b.Property<bool>("IsArchive")
                        .HasColumnType("boolean");

                    b.Property<int>("IterationCount")
                        .HasColumnType("integer");

                    b.Property<int>("IterationCurrent")
                        .HasColumnType("integer");

                    b.Property<string>("LearningId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<float>("StartDeposit")
                        .HasColumnType("real");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<float>("StopLossPercent")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Testing");
                });

            modelBuilder.Entity("Soulnet.Model.Entity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.HasKey("Id");

                    b.ToTable("User");
                });
#pragma warning restore 612, 618
        }
    }
}
